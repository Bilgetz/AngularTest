buildscript {
    ext {
        springBootVersion = '1.3.0.BUILD-SNAPSHOT'
    }
    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}") 
    }
}

apply plugin: 'java'
apply plugin: 'eclipse-wtp'
apply plugin: 'idea'
apply plugin: 'spring-boot' 
apply plugin: 'war'


war {
    baseName = 'demo'
    version = '0.0.1-SNAPSHOT'
}
sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/snapshot" }
    maven { url "https://repo.spring.io/milestone" }
}

configurations {
    providedRuntime
}

dependencies {
    //compile('org.springframework.boot:spring-boot-starter-cache')
    compile('org.springframework.boot:spring-boot-starter-data-jpa')
    compile('org.springframework.boot:spring-boot-starter-data-rest')
    compile('org.projectlombok:lombok')
    compile('org.springframework.boot:spring-boot-starter-security')
    compile('org.springframework.boot:spring-boot-starter-web')
    runtime('com.h2database:h2')
    providedRuntime('org.springframework.boot:spring-boot-starter-tomcat')
    testCompile('org.springframework.boot:spring-boot-starter-test')
    
    compile('org.apache.commons:commons-lang3:3.4')
     
}

dependencyManagement {
	imports { 
		mavenBom "org.springframework.cloud:spring-cloud-starter-parent:Brixton.M1" 
	}
}


eclipse {
    classpath {
    	 downloadSources = true
		 downloadJavadoc = true
         containers.remove('org.eclipse.jdt.launching.JRE_CONTAINER')
         containers 'org.eclipse.jdt.launching.JRE_CONTAINER/org.eclipse.jdt.internal.debug.ui.launcher.StandardVMType/JavaSE-1.8'
    }
	    wtp {
		    	component {
		    		resource deployPath: '/', sourcePath: '/src/main/webapp'
		
		    	}
	    	}
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.7'
}


def String generateDirectory(File directory, String relatif) {
	String result = "";
	file(directory).listFiles().each {
		if(it.directory) {
			result = result + generateDirectory(it, relatif + it.name + "/");
		}
		else {
			result = result + "'"+relatif +it.name + "',";
		}
    }
	return result;

}

task generateSWCache() {
 	 println('generate');
 	 println(generateDirectory(new File('src/main/resources/static'), ''));
}

